@{
    ViewBag.Title = "Catégories des produits";
}


<div class="row">
    <div ui-grid-selection ui-grid-pagination ui-grid-auto-resize ui-grid-move-columns ui-grid="gridOptions" ui-grid-resize-columns ui-grid-edit ui-grid-cellnav class="grid"></div>
</div>
<div class="row">
    <div ui-grid-selection ui-grid-pagination ui-grid-auto-resize ui-grid-move-columns ui-grid="gridOptions2" ui-grid-resize-columns ui-grid-edit ui-grid-cellnav class="grid"></div>
</div>





    @section Scripts
{

        <script>

            $(document).ready(function () {


                app.controller("AdminCtrl", ['$scope', '$element', 'Animations', 'uiGridConstants', '$timeout', '$interval', '$attrs', 'crudGridDataFactory', 'notificationFactory', 'lookupFactory', function ($scope, $element, Animations, uiGridConstants, $timeout, $interval, $attrs, crudGridDataFactory, notificationFactory, lookupFactory) {
                    $scope.showAdd = true;
                    $scope.animation = Animations.opacity;
                    $("body").css("fontSize", @StatistiqueController.getPolice());
                    //$scope.$scope = $scope;
                    $scope.table = "Familles";
                    $scope.lookupFactory = lookupFactory;

                    $scope.filterOptions = {
                        filterText: "",
                        filterVisible: null,
                        useExternalFilter: true
                    };
                    $("#addNew").click(function () {
                        $scope.addNew();
                    });
                    //$scope.pagingOptions = {
                    //    pageSizes: [5, 10, 30],
                    //    pageSize: 5,
                    //    totalServerItems: 0,
                    //    currentPage: 1
                    //};
                    $scope.deleteMode = false;
                    $scope.focusFirstCell = function () {
                        $scope.gridApi.selection.toggleRowSelection($scope.gridOptions.data[0]);
                    }
                    //console.log("ok")

                    $scope.onDblClickRow = function (rowItem) {

                        console.log("dbClick")
                    };
                    $scope.gridOptions = {

                        showColumnFooter: true,
                        enableRowSelection: true,
                        enableRowHeaderSelection: false,
                        showGridFooter: true,
                        enableFiltering: false,
                        //paginationPageSizes: [5, 10, 30],
                        //paginationPageSize: 5,
                        enableVerticalScrollbar : uiGridConstants.scrollbars.WHEN_NEEDED,
                        enableColumnResizing: true,
                        rowHeight: 39,
                        enableFullRowSelection : true,

                    };

                    $scope.gridOptions2 = {
                        showColumnFooter: true,
                        enableRowSelection: true,
                        enableRowHeaderSelection: false,
                        showGridFooter: true,
                        enableFiltering: false,
                        //paginationPageSizes: [5, 10, 30],
                        //paginationPageSize: 5,
                        enableVerticalScrollbar : uiGridConstants.scrollbars.WHEN_NEEDED,
                        enableColumnResizing: true,
                        rowHeight: 39,
                        enableFullRowSelection : true,

                    };


                    $scope.gridOptions.multiSelect = false;
                    $scope.gridOptions.modifierKeysToMultiSelect = false;
                    $scope.gridOptions.noUnselect = true;

                    $scope.gridOptions2.multiSelect = false;
                    //$scope.gridOptions.modifierKeysToMultiSelect = false;
                    $scope.gridOptions2.noUnselect = true;

                    $scope.items = [];
                    //<a class="btn-floating btn-flat waves-effect waves-light pink accent-2 white-text"><i class="mdi-content-content-cut"></i></a>
                    //<button class="btn btn-danger btn-xs btn-block" ng-click="grid.appScope.delete($event, row.entity)"><span class="icon-trash"></span></button>
                    var headerTemplateAdd = '<a style="margin-left:15px !important;" ng-click="grid.appScope.update($event, row.entity)"class="btn-floating btn-flat waves-effect waves-light red accent-2 btnGrid"><i class="mdi-content-save"></i></a><a style="margin-left:15px !important;" title="Code barre"  ng-click="grid.appScope.printBarCode($event, row.entity.Id)"class="btn-floating btn-flat waves-effect waves-light red accent-2 btnGrid"><i class="mdi-action-print"></i>';
                    var headerTemplateDelete = '<a style="margin-left:15px !important;"  ng-click="grid.appScope.delete($event, row.entity)" class="btn-floating btnGrid waves-effect btn-flat waves-effect waves-light waves-light red"><i class="mdi-action-delete""></i></a>';
                    $scope.gridOptions.columnDefs = [
                    { enableCellEdit: false, width: "133", allowCellFocus: false, headerCellTemplate: '<button style="width:131px;" class="btn cyan btn-xs btn-block" ng-click="grid.appScope.addNew()"><span class="icon-plus"></span></button>', name: ' ', cellTemplate: headerTemplateAdd, sortable: false },
                    { name: 'Name', displayName: 'Catégorie', width: "*", resizable: true },
                    { enableCellEdit: false, width: "76", name: '\'', allowCellFocus: false, headerCellTemplate: '<button class="btn cyan btn-xs btn-block" ng-click="grid.appScope.toggleFiltering()"><span class="icon-filter"></span></button>', cellTemplate: headerTemplateDelete, sortable: false },

                    ];

                    var headerTemplateAdd2 = '<a style="margin-left:45px !important;" ng-click="grid.appScope.update2($event, row.entity)"class="btn-floating btn-flat waves-effect waves-light red accent-2 btnGrid"><i class="mdi-content-save"></i></a>';
                    var headerTemplateDelete2 = '<a style="margin-left:15px !important;"  ng-click="grid.appScope.delete2($event, row.entity)" class="btn-floating btnGrid waves-effect btn-flat waves-effect waves-light waves-light red"><i class="mdi-action-delete""></i></a>';
                    $scope.gridOptions2.columnDefs = [
                    { enableCellEdit: false, width: "133", allowCellFocus: false, headerCellTemplate: '<button style="width:131px;" class="btn cyan btn-xs btn-block" ng-click="grid.appScope.addNew2()"><span class="icon-plus"></span></button>', name: ' ', cellTemplate: headerTemplateAdd2, sortable: false },
                    { name: 'Name', displayName: 'Sous Catégorie', width: "*", resizable: true },
                    { enableCellEdit: false, width: "76", name: '\'', allowCellFocus: false, headerCellTemplate: '<button class="btn cyan btn-xs btn-block" ng-click="grid.appScope.toggleFiltering()"><span class="icon-filter"></span></button>', cellTemplate: headerTemplateDelete2, sortable: false },

                    ];

                    $scope.printBarCode = function(e,IdCategory)
                    {
                        window.open("ExportBarCodeByCategory?IdCategory="+IdCategory, "Administration");
                    }

                    $scope.getPagedDataAsync = function () {
                        crudGridDataFactory($scope.table, '','Categories').query(itemsQuerySucceeded, queryFailed);
                    };
                    $scope.getPagedDataAsync();

                    $scope.gridOptions.onRegisterApi = function (gridApi) {
                        $scope.gridApi = gridApi;

                        gridApi.selection.on.rowSelectionChanged($scope, $scope.selectedRow);
                        gridApi.grid.registerRowBuilder(function (row, gridOptions) {
                            row.isNew = true;
                        });
                        gridApi.cellNav.on.navigate($scope, function (newRowCol, oldRowCol) {
                            $scope.gridApi.selection.selectRow(newRowCol.row.entity);
                        });
                       
                    }
                    $scope.selectRow = function () {
                        return $scope.gridApi.selection.getSelectedRows();
                    };

                    $scope.toggleFiltering = function () {
                        $scope.gridOptions.enableFiltering = !$scope.gridOptions.enableFiltering;
                        $scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);
                        //$scope.gridApi.core.notifyDataChange($scope.gridApi.grid, uiGridConstants.dataChange.ALL);

                    };

                    $scope.addNew = function () {
                        $scope.addMode = true;
                        $scope.item = new Object({});
                        $scope.items.unshift($scope.item);
                        $scope.focusFirstCell();
                    }

                    $scope.selectedRow = function()
                    {
                        if($scope.gridApi != undefined && $scope.gridApi != null && $scope.gridApi.selection.getSelectedRows().length == 1) {

                            var selected = $scope.gridApi.selection.getSelectedRows()[0];
                            $scope.gridOptions2.data = selected.Categories;

                            return selected;
                        }

                        return null;// ou undefined
                    }

                    $scope.addNew2 = function () {
                        console.log($scope.selectedRow().Name)
                        $scope.selectedRow().Categories.unshift(new Object({IdFamille:$scope.selectedRow().Id}));
                    }

                    $scope.update = function (e,item) {
                        //console.log(item)
                        if (item.Id == null) {
                            item.Id = breeze.core.getUuid();
                            crudGridDataFactory($scope.table).save(item, saveSucceeded, saveFailed);
                            item.Categories = [];
                        }
                        else {
                            crudGridDataFactory($scope.table).update({ key: 'guid\'' + item.Id + '\'' }, item, saveSucceeded, saveFailed);
                        }
                    }

                    $scope.update2 = function (e,item) {
                        //console.log(item)
                        if (item.Id == null) {
                            item.Id = breeze.core.getUuid();
                            crudGridDataFactory("Categories").save(item, saveSucceeded, saveFailed);

                        }
                        else {
                            crudGridDataFactory("Categories").update({ key: 'guid\'' + item.Id + '\'' }, item, saveSucceeded, saveFailed);
                        }
                    }

                    $scope.delete = function (e, item) {
                        //console.log(item)
                        if (confirm("Voulez-vous supprimer cet enregistrement ?")) {

                            if (item.Id != null) {
                                $scope.deleteMode = true;
                                crudGridDataFactory($scope.table).remove({ key: 'guid\'' + item.Id + '\'' }, item, saveSucceeded, saveFailed);
                                $scope.gridOptions.data.splice($scope.gridOptions.data.indexOf(item), 1);

                            }else
                            {
                                $scope.gridOptions.data.splice($scope.gridOptions.data.indexOf(item), 1);

                            }
                        }

                    }

                    $scope.delete2 = function (e, item) {
                        //console.log(item)
                        if (confirm("Voulez-vous supprimer cet enregistrement ?")) {

                            if (item.Id != null) {
                                $scope.deleteMode = true;
                                crudGridDataFactory("Categories").remove({ key: 'guid\'' + item.Id + '\'' }, item, saveSucceeded, saveFailed);
                                $scope.gridOptions2.data.splice($scope.gridOptions2.data.indexOf(item), 1);

                            }else
                            {
                                $scope.gridOptions2.data.splice($scope.gridOptions.data.indexOf(item), 1);

                            }
                        }

                    }
                    /*region generique*/
                    function queryFailed(error) {
                        notificationFactory.error(error.message, "Query failed");
                    }

                    function itemsQuerySucceeded(data) {
                        $scope.items = data.value;
                        $scope.gridOptions.data = $scope.items;

                        
                        //$scope.totalServerItems = data["odata.count"];
                        //if ($scope.items.length > 0) {
                        //    if ($scope.item) {
                        //        for (i = 0; i < $scope.items.length; i++) {
                        //            if ($scope.items[i].Id == $scope.item.Id)
                        //                $scope.dataGrid.selectedItem = $scope.items[i];
                        //        }
                        //    }
                        //    if ($scope.dataGrid.selectedItem == null) {
                        //        $scope.dataGrid.selectedItem = $scope.items[0];
                        //    }

                        //    $scope.setItem($scope.dataGrid.selectedItem);
                        //}

                        //notificationFactory.success("Fetched " + data.value.length + " " + $scope.table);
                    }

                    function queryFailed(error) {
                        notificationFactory.error(error.message, "Query failed");
                    }

                    saveSucceeded = function (saveResult) {

                        notificationFactory.success();
                        //$scope.getPagedDataAsync();

                    }

                    saveFailed = function (error) {
                        var reason = error.statusText;
                        var detail = error.data["odata.error"];
                        if (detail) {
                            reason += detail.innererror.message;
                        }
                        if (error.config["method"] == "POST")
                            $scope.item.Id = null; //on affecte null pour permetre d'ajouter a nouveau le meme item

                        notificationFactory.error(
                           "Impossible d'enregistrer les modifications. " + reason +
                       " Il faut actualiser la page.");
                        $scope.getPagedDataAsync();
                        /*
                        var entityErrors = error.entityErrors;

                        if (entityErrors && entityErrors.length) {
                            handleSaveValidationError(entityErrors);
                            return;
                        }
                        if (detail && detail.ExceptionType &&
                            detail.ExceptionType.indexOf('OptimisticConcurrencyException') !== -1) {
                            // Concurrency error
                            reason =
                                "Another user, perhaps the server, may have deleted one or all of the same entities.";
                        }
                        */

                    };
                    //$scope.gridOptions.data = $scope.table;
                }]);
                angular.bootstrap(document, ['AdminModule']);

            });
        </script>

    }

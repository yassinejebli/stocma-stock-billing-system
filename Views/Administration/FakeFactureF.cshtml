@{
    ViewBag.Title = "Nouvelle Facture";
}



<div class="switch">
    Rechercher par :
    <label>
        Designation
        <input type="checkbox" ng-model="search">
        <span class="lever"></span> Ref
    </label>
</div>


<div class="row">
    <!-- BEGIN EXAMPLE TABLE widget-->


    <div>
        <div class="card-panel">
            <div class="row">

                <div class="row">
                    @*<div class="pull-left">
                            <div class="form-group">
                                <input type="text" ng-model="item.NumBon" placeholder="Numero du bon" class="" />
                            </div>
                        </div>*@

                    <div class="col-lg-2">
                        <div class="form-group">
                            <label>Mode Reg </label>
                            <input type="text" id="" placeholder="Ex : BMCE 9999999" ng-model="item.Comment">
                        </div>
                    </div>
                    <div class="col-lg-3 col-lg-offset-2">
                        <div class="form-group">
                            <label>Entrez un fournisseur </label>

                            <input type="text" autocomplete="off" ng-model="filterOptions.filterFournisseur" placeholder="Nom du fournisseur"
                                   typeahead="v as v.Name for v  in lookupFactory.get('Fournisseurs', 'Name', $viewValue)"
                                   @*typeahead-input-formatter="lookupFactory.format($model,'Name')"
                                        typeahead-on-select="lookupFactory.format($model,'Name')"*@
                                   typeahead-wait-ms=" 100"
                                   class="" />
                        </div>
                    </div>
                    <div class="col-lg-2 col-lg-offset-3">
                        <label>Date </label>
                        <input type="date" id="" placeholder="Choisissez une date" ng-model="item.Date">
                    </div>
                </div>


                <div class="row">
                    <div ui-grid-selection ui-grid-auto-resize ui-grid-move-columns ui-grid="gridOptions" ui-grid-resize-columns ui-grid-edit ui-grid-cellnav class="grid"></div>

                </div>

            </div>
            <!--Paiement-->


        </div>
    </div>
</div>
<div class="fixed-action-btn" style="right:100px !important;">
    <a ng-click="save()" class="btn-floating waves-effect waves-light btn-large cyan">
        <i class="large mdi-content-save"></i>
    </a>
</div>







@*<div class="dataTables_filter"><label>Date: <input ng-model="item.Date" type="date" id="datePicker" aria-controls="editable-sample" class="medium"></label></div>
        <div style="margin-left:350px;" class="span6">
            <label> Fournisseur :
                <input type="text" autocomplete="off" ng-model="filterOptions.filterFournisseur" placeholder="choisissez un Fournisseur" id=""
                       typeahead="v as v.Name for v  in lookupFactory.get('Fournisseurs', 'Name', $viewValue)"
                       @*typeahead-input-formatter="lookupFactory.format($model,'Name')"
        typeahead-on-select="lookupFactory.format($model,'Name')"
                       typeahead-wait-ms=" 100"
                       class="form-control">

            </label>

        </div>
        <div ui-grid-selection ui-grid-auto-resize ui-grid-move-columns ui-grid="gridOptions" ui-grid-resize-columns ui-grid-edit ui-grid-cellnav class="grid"></div>
    <button class="btn btn-large btn-primary" ng-click="save()" type="button">VALIDER</button>*@<!-- END EXAMPLE TABLE widget-->
@section Scripts
{

    <script>

    $(document).ready(function () {


        app.controller("AdminCtrl", ['$scope', '$element', 'Animations', 'uiGridConstants', '$timeout', '$interval', '$attrs', 'crudGridDataFactory', 'notificationFactory', 'lookupFactory', function ($scope, $element, Animations, uiGridConstants, $timeout, $interval, $attrs, crudGridDataFactory, notificationFactory, lookupFactory) {
            $scope.animation = Animations.opacity;
            $scope.isArticleFacture = true;
            $("body").css("fontSize", @StatistiqueController.getPolice());
            //$scope.$scope = $scope;
            $scope.table = "FakeFactureFs";
            $scope.lookupFactory = lookupFactory;
            var saved = false;
            $scope.bon = 'FakeFactureF';
            $scope.pay = new Object({ Id: breeze.core.getUuid() })
            $scope.pay2 = new Object({ Id: breeze.core.getUuid() })
            $scope.showPay = false;
            $scope.filterOptions = {
                filterText: "",
                filterVisible: null,
                useExternalFilter: true,
                filterFournisseur: ""
            };

            //$scope.pagingOptions = {
            //    pageSizes: [5, 10, 30],
            //    pageSize: 5,
            //    totalServerItems: 0,
            //    currentPage: 1
            //};
            $scope.deleteMode = false;
            $scope.focusFirstCell = function () {
                // $scope.gridApi.selection.toggleRowSelection($scope.gridOptions.data[0]);
            }
            //console.log("ok")

            $scope.onDblClickRow = function (rowItem) {

                console.log("dbClick")
            };
            $scope.gridOptions = {
                showColumnFooter: true,
                enableRowSelection: true,
                enableRowHeaderSelection: false,
                showGridFooter: true,
                enableFiltering: false,
                //paginationPageSizes: [5, 10, 30],
                //paginationPageSize: 5,
                enableVerticalScrollbar: uiGridConstants.scrollbars.WHEN_NEEDED,
                enableColumnResizing: true,
                rowHeight: 40,
                //enableCellEditOnFocus : true,
                /*export*/


            };
            Date.prototype.toDateInputValue = (function () {
                var local = new Date(this);
                local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
                return local.toJSON().slice(0, 10);
            });
            $('#datePicker').val(new Date().toDateInputValue());

            $scope.gridOptions.multiSelect = false;
            //$scope.gridOptions.modifierKeysToMultiSelect = false;
            $scope.gridOptions.noUnselect = true;
            var CellTemplateDelete = '<a style="margin-left:15px !important;" title="{{row.entity.ArticleFacture.PA+10}}"  ng-click="grid.appScope.delete($event, row.entity)" class="btn-floating btnGrid waves-effect btn-flat waves-effect waves-light waves-light cyan"><i class="mdi-action-delete""></i></a>';



            $scope.item = new Object({ Id: breeze.core.getUuid(), FakeFactureFItems: [] });
            $scope.item.Date = new Date();

            $scope.gridOptions.columnDefs = [
            { enableCellEdit: false, visible: true, enableHiding: true, width: "76", allowCellFocus: false, headerCellTemplate: '<button class="btn cyan btn-xs btn-block" ng-click="grid.appScope.addNew()"><span class="icon-plus"></span></button>', name: ' ', cellTemplate: CellTemplateDelete, sortable: false },
            { name: 'ArticleFacture.Ref', visible: true, enableHiding: true, displayName: 'Ref', width: "140", enableCellEdit: false },
            { name: 'ArticleFacture.Designation', displayName: 'Désignation', width: "*", enableCellEdit: false },
            { name: 'Qte', displayName: 'Qte', width: "120", type: "number", enableCellEditOnFocus: false, cellFilter: 'number: 2' },
            { name: 'Pu', displayName: 'P.U', width: "120", type: "number", enableCellEditOnFocus: false, cellFilter: 'currency:dh' },
            { name: 'TotalHT', displayName: 'TOTAL', width: "92", enableCellEdit: false, aggregationType: uiGridConstants.aggregationTypes.sum, width: '14%', cellFilter: 'currency:dh' },


            ];


            $scope.check = function () {
                var yes = false;

                if (saved) {
                    yes = true;
                }
                return yes;
            }
            $scope.gridOptions.data = [];
            //angular.forEach($scope.gridOptions.data.FakeFactureFItems, function (row) {
            //    row.getTOTAL = function () {
            //        return this.Ref;
            //    }
            //});

            $scope.gridOptions.onRegisterApi = function (gridApi) {
                $scope.gridApi = gridApi;
                gridApi.edit.on.afterCellEdit($scope, function (rowEntity, colDef, newValue, oldValue) {
                    rowEntity.TotalHT = rowEntity.Pu * rowEntity.Qte;
                    if (isNaN(rowEntity.TotalHT))
                        rowEntity.TotalHT = "";
                    if($scope.search)
                    {
                        setTimeout(function(){
                            $("#rechercher2").focus();
                        },150);
                    }else
                    {
                        setTimeout(function(){
                            $("#rechercher").focus();
                        },150);
                    }

                    if($scope.isArticleFacture)
                    {
                        setTimeout(function(){
                            $("#rechercher1").focus();
                        },150);
                    }
                    $scope.$apply();
                });
                gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                    $scope.setItem(row.entity);
                    //console.log($scope.item);
                });
                gridApi.grid.registerRowBuilder(function (row, gridOptions) {
                    row.isNew = true;
                });
                gridApi.cellNav.on.navigate($scope, function (newRowCol, oldRowCol) {
                    $scope.gridApi.selection.selectRow(newRowCol.row.entity);
                });
            }
            $scope.selectRow = function () {
                return $scope.gridApi.selection.getSelectedRows();
            };

            $scope.toggleFiltering = function () {
                $scope.gridOptions.enableFiltering = !$scope.gridOptions.enableFiltering;
                $scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);
                //$scope.gridApi.core.notifyDataChange($scope.gridApi.grid, uiGridConstants.dataChange.ALL);
            };
            $scope.scrollTo = function( rowIndex, colIndex ) {
                $scope.gridApi.cellNav.scrollTo( $scope.gridOptions.data[rowIndex], $scope.gridOptions.columnDefs[colIndex]);
            };

            $scope.scrollToFocus = function( rowIndex, colIndex ) {
                $scope.gridApi.cellNav.scrollToFocus( $scope.gridOptions.data[rowIndex], $scope.gridOptions.columnDefs[colIndex]);
            };

            $scope.$watch('filterOptions.filterArticleFacture', function (oldValue, newValue) {
                if ($scope.filterOptions.filterArticleFacture != undefined && typeof $scope.filterOptions.filterArticleFacture === 'object') {
                    if ($scope.filterOptions.filterFournisseur != undefined && typeof $scope.filterOptions.filterFournisseur === 'object') {
                        var a = $scope.filterOptions.filterArticleFacture;
                        $scope.item.FakeFactureFItems.unshift(new Object({ Id: breeze.core.getUuid(), IdFakeFactureF: $scope.item.Id, ArticleFacture: a, IdArticleFacture: a.Id, Pu: a.PA }));
                        setTimeout(function(){
                            $scope.filterOptions.filterArticleFacture = null;
                            //$scope.myLogo = a.Logo;
                            $scope.scrollToFocus(0,3);

                        },100);

                    }else
                    {

                        notificationFactory.warning("Choisissez un fournisseur ! ", "Attention");
                    }
                }

            });

            $scope.fournisseur = '@StatistiqueController.getCompanyName()';
            $scope.addNew = function () {
                //$scope.addMode = true;
                //$scope.item.FakeFactureFItems.unshift(new Object({ Id: breeze.core.getUuid(), IdBonReception: $scope.item.Id }));
                //$scope.focusFirstCell();
                window.open("@Url.Action("PopUpArticleFacture", "Administration")", "MesProduits", "width=950, height=650,top=0, left=0");


                    //console.log(totals.toFixed(2));

                    //grid.getColumn("units").getAggregationValue()

                }

                $scope.save = function () {


                    if ($scope.item.Comment == undefined || $scope.item.Comment == "") {
                        notificationFactory.warning("Entrez le mode de réglement", "Attention");
                        return;
                    }

                    if ($scope.item.Date == undefined || $scope.item.Date == "") {
                        notificationFactory.warning("Saisissez une date valide S.V.P", "Attention");
                        return;
                    }
                    if ($scope.filterOptions.filterFournisseur == "" || typeof $scope.filterOptions.filterFournisseur != 'object') {
                        notificationFactory.warning("Choisissez un fournisseur S.V.P", "Attention");
                        return;
                    }
                    if ($scope.item.FakeFactureFItems.length == 0) {
                        notificationFactory.warning("Remplissez les piéces de bon S.V.P", "Attention");
                        return;
                    }


                    var error = false;
                    for (var i = 0; i < $scope.item.FakeFactureFItems.length ; i++) {
                        var brItem = $scope.item.FakeFactureFItems[i];
                        if (brItem.Qte == undefined || brItem.Pu == undefined || brItem.TotalHT == undefined || brItem.Qte == null || brItem.Pu == null || brItem.TotalHT == null || brItem.Qte == "" || brItem.Pu == "" || brItem.TotalHT == "") {
                            error = true;
                        }
                    }
                    if (error) {
                        notificationFactory.warning("Remplissez tous les lignes S.V.P !", "Attention");
                        return;
                    }
                    //delete $scope.item["Fournisseur"];

                    if (lookupFactory.getLastId("FakeFactureFs", "Ref") != undefined && lookupFactory.getLastId("FakeFactureFs", "Ref") != null && lookupFactory.getLastId("FakeFactureFs", "Ref").length != 0)
                        $scope.item.Ref = lookupFactory.getLastId("FakeFactureFs", "Ref")[0].Ref + 1;
                    else
                        $scope.item.Ref = 1;

                    if(typeof $scope.filterOptions.filterBonLivraison === "object")
                        $scope.item.IdBonLivraison = $scope.filterOptions.filterBonLivraison.Id;

                    if($scope.fournisseur == 'AQK')
                        $scope.item.NumBon =  $scope.fournisseur+'/' + new Date().getFullYear().toString()+("0" + (new Date().getMonth() + 1)).slice(-2)+"0"+$scope.item.Ref;
                    else
                        $scope.item.NumBon = $scope.item.Ref.toString() + '/' + new Date().getFullYear();

                    $scope.item.IdFournisseur = $scope.filterOptions.filterFournisseur.Id;
                    //$scope.item.Date
                    //delete $scope.item.FakeFactureFItems[0]["TotalHT"];
                    //delete $scope.item.FakeFactureFItems[0]["ArticleFacture"];
                    //beforeSave($scope.item.FakeFactureFItems);
                    $scope.item.User = '@User.Identity.Name.Split('@')[0]';

                    for (var i = 0; i < $scope.item.FakeFactureFItems.length; i++) {
                        delete $scope.item.FakeFactureFItems[i]["ArticleFacture"];
                    }
                    crudGridDataFactory($scope.table).save($scope.item, saveSucceeded, saveFailed);


            }
            Date.prototype.addHours = function (h) {
                this.setHours(this.getHours() + h);
                return this;
            }
            var ArticleFactures = new Object({});
            beforeSave = function (item) {
                ArticleFactures = new Object({ items: item });
            }

            $scope.delete = function (e, item) {

                $scope.gridOptions.data.splice($scope.gridOptions.data.indexOf(item), 1);


            }

            $scope.$watch('filterOptions.filterBonLivraison', function (oldValue, newValue) {
                var oldfilter = $scope.filterOptions.filterText;
                $scope.filterOptions.filterText = '';


                if ($scope.filterOptions.filterBonLivraison != undefined && typeof $scope.filterOptions.filterBonLivraison === 'object') {
                    if ($scope.filterOptions.filterBonLivraison['NumBon'] != '' && $scope.filterOptions.filterBonLivraison['NumBon'] != undefined) {


                        for (var i = 0; i < $scope.filterOptions.filterBonLivraison.BonLivraisonItems.length; i++) {
                            var myItem = $scope.filterOptions.filterBonLivraison.BonLivraisonItems[i];

                            $scope.item.FakeFactureFItems.unshift({ Id: breeze.core.getUuid(), IdFakeFactureF: $scope.item.Id, IdArticleFacture: myItem.IdArticleFacture, ArticleFacture: myItem.ArticleFacture, Ref: myItem.Ref, Designation: myItem.Designation, Qte: myItem.Qte, Pu: myItem.Pu, TotalHT: myItem.TotalHT });
                        }

                        $scope.gridOptions.data = $scope.item.FakeFactureFItems;
                        $scope.filterOptions.filterFournisseur = $scope.filterOptions.filterBonLivraison.Fournisseur;


                    }
                } else {
                    //   $scope.item.FakeFactureFItems = [];
                    $scope.gridOptions.data = $scope.item.FakeFactureFItems;
                }


            }, true);


            $scope.$watch('filterOptions.filterFournisseur', function (oldValue, newValue) {

                if (oldValue != newValue) {
                    if ($scope.filterOptions.filterFournisseur != undefined && typeof $scope.filterOptions.filterFournisseur === 'object') {
                        if ($scope.filterOptions.filterFournisseur.Id == '45c8b294-3a63-487c-821e-70bf4f9bdc39') {
                            $scope.showPay = false;

                        } else {
                            $scope.showPay = true;

                        }
                        setTimeout(function(){
                            $("#rechercher").focus();
                        },150);
                    } else {
                        $scope.showPay = false;
                    }

                }

            }, true);
            $scope.setItem = function (item) {
                $scope.myItem = item;

            }
            $scope.gridOptions.data = $scope.item.FakeFactureFItems;
            /*region generique*/
            function queryFailed(error) {
                notificationFactory.error(error.message, "Query failed");
            }

            function itemsQuerySucceeded(data) {
                $scope.items = data.value;
                $scope.gridOptions.data = $scope.item.items;
                //$timeout(function () {
                //    if ($scope.gridApi.selection.selectRow) {
                //        $scope.gridApi.selection.selectRow($scope.gridOptions.data[0]);
                //    }
                //});
                //$scope.totalServerItems = data["odata.count"];
                //if ($scope.items.length > 0) {
                //    if ($scope.item) {
                //        for (i = 0; i < $scope.items.length; i++) {
                //            if ($scope.items[i].Id == $scope.item.Id)
                //                $scope.dataGrid.selectedItem = $scope.items[i];
                //        }
                //    }
                //    if ($scope.dataGrid.selectedItem == null) {
                //        $scope.dataGrid.selectedItem = $scope.items[0];
                //    }

                //    $scope.setItem($scope.dataGrid.selectedItem);
                //}

                //notificationFactory.success("Fetched " + data.value.length + " " + $scope.table);
            }

            function queryFailed(error) {
                notificationFactory.error(error.message, "Query failed");
            }
            $scope.clear = function () {
                $scope.gridOptions.data = [];

                $scope.item = new Object({ Id: breeze.core.getUuid(), FakeFactureFItems: [] });
                $scope.gridOptions.data = $scope.item.FakeFactureFItems;
                $scope.filterOptions.filterFournisseur = "";
                $scope.item.Date = new Date();
            }

            saveSucceeded = function (saveResult) {
                //$scope.item.FakeFactureFItems.length = 0;
                //$scope.item = {};

                //$scope.item.FakeFactureFItems = ArticleFactures.items;
                //$scope.gridOptions.data = ArticleFactures.items;

                notificationFactory.success();
                //$scope.getPagedDataAsync();




                myWindow = window.open("@Url.Action("PopUpPrintFakeFactureF", "Administration")", "FA");
                myWindow.myBon = $scope.item;
                myWindow.myBon.Fournisseur = $scope.filterOptions.filterFournisseur;
                $scope.clear();


            }


            saveFailed = function (error) {
                var reason = error.statusText;
                var detail = error.data["odata.error"];
                if (detail) {
                    reason += detail.innererror.message;
                }
                //if (error.config["method"] == "POST")
                //    $scope.item.Id = null; //on affecte null pour permetre d'ajouter a nouveau le meme item

                notificationFactory.error(
                   "Impossible d'enregistrer les modifications. " + reason +
               " Il faut actualiser la page.");
                /*
                var entityErrors = error.entityErrors;

                if (entityErrors && entityErrors.length) {
                    handleSaveValidationError(entityErrors);
                    return;
                }
                if (detail && detail.ExceptionType &&
                    detail.ExceptionType.indexOf('OptimisticConcurrencyException') !== -1) {
                    // Concurrency error
                    reason =
                        "Another user, perhaps the server, may have deleted one or all of the same entities.";
                }
                */

            };
            //$scope.gridOptions.data = $scope.table;
        }]);
        angular.bootstrap(document, ['AdminModule']);

    });
    </script>
}

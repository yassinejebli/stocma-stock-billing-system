@{
    ViewBag.Title = "Nouveau Tarif "+DateTime.Now.Year;
}


<div class="row">
    <!-- BEGIN EXAMPLE TABLE widget-->


    <div>
        <div class="card-panel">
            <div class="row">
               
                <div class="row">
                    <div class="col-lg-2">
                        <label>Titre du tarif </label>
                        <input type="text" ng-model="item.Ref">
                    </div>
                  
                    <div class="col-lg-2">
                        <label>Date </label>
                        <input type="date" id="" ng-model="item.Date">
                    </div>
                </div>
                @*<div class="row">

                        <div>
                            <img class="img-responsive img-thumbnail" src="{{myItem.Article.Logo}}" ng-show="myItem.Article.Logo!=null" style="height: 150px!important;" />
                        </div>
                    </div>*@

                <div class="row">
                    <div ui-grid-selection ui-grid-auto-resize ui-grid-move-columns ui-grid="gridOptions" ui-grid-resize-columns ui-grid-edit ui-grid-cellnav class="grid"></div>

                </div>

            </div>
         

            @*<div class="row">
                    <div ng-show="showPay">
                        <div class="input-field col s3">
                            <select style="border:1px solid #ccc !important" ng-model="pay.IdTypePaiement" class="browser-default">
                                <option disabled selected value="null">Type de réglement</option>
                                <option value="399d159e-9ce0-4fcc-957a-08a65bbeecb2">Espéce</option>
                                <option value="399d159e-9ce0-4fcc-957a-08a65bbeecb3">Chéque</option>
                                <option value="399d159e-9ce0-4fcc-957a-08a65bbeecb4">Effet</option>
                                <option value="399d159e-9ce0-4fcc-957a-08a65bbeecc1">Versement</option>
                            </select>
                        </div>
                        <div class="input-field col s3">
                            <input style="color:green;font-weight:bold;"  id="test" type="number" ng-model="pay.Credit" class="validate">
                            <label for="test">Montant à payer</label>
                        </div>
                        <div ng-show="chequeEffet()" class="col-lg-2 col-lg-offset-0">
                            <label>Echéance</label>
                            <input ng-model="pay.DateEcheance" id="cc" type="date" class="validate">
                        </div>
                        <div class="input-field col s3">
                            <input ng-model="pay.Comment" id="aa" type="text" class="validate">
                            <label for="aa">Commentaire </label>
                        </div>
                        <div class="input-field col s3">
                            <input ng-style="solde < 0 && {color:'red'}" style="font-weight:bold;" value="Solde : {{solde}}" type="text" readonly>
                        </div>
                    </div>
                    @*<div class="input-field col s12">
                            <button ng-click="save()" class="btn cyan waves-effect waves-light right" name="action">
                                Valider
                                <i class="mdi-content-send right"></i>
                            </button>
                        </div>
                </div>*@
        </div>
    </div>
</div>
<div class="fixed-action-btn" style="right:100px !important;">
    <a ng-click="save()" class="btn-floating waves-effect waves-light btn-large cyan">
        <i class="large mdi-content-save"></i>
    </a>
</div>








@*<div class="dataTables_filter"><label>Date: <input ng-model="item.Date" type="date" id="datePicker" aria-controls="editable-sample" class="medium"></label></div>
        <div style="margin-left:350px;" class="span6">
            <label> Fournisseur :
                <input type="text" autocomplete="off" ng-model="filterOptions.filterFournisseur" placeholder="choisissez un Fournisseur" id=""
                       typeahead="v as v.Name for v  in lookupFactory.get('Fournisseurs', 'Name', $viewValue)"
                       @*typeahead-input-formatter="lookupFactory.format($model,'Name')"
        typeahead-on-select="lookupFactory.format($model,'Name')"
                       typeahead-wait-ms=" 100"
                       class="form-control">

            </label>

        </div>
        <div ui-grid-selection ui-grid-auto-resize ui-grid-move-columns ui-grid="gridOptions" ui-grid-resize-columns ui-grid-edit ui-grid-cellnav class="grid"></div>
    <button class="btn btn-large btn-primary" ng-click="save()" type="button">VALIDER</button>*@<!-- END EXAMPLE TABLE widget-->
@section Scripts
{

    <script>

        $(document).ready(function () {


            app.controller("AdminCtrl", ['$scope', '$http', '$element', 'Animations', 'uiGridConstants', '$timeout', '$interval', '$attrs', 'crudGridDataFactory', 'notificationFactory', 'lookupFactory', function ($scope, $http, $element, Animations, uiGridConstants, $timeout, $interval, $attrs, crudGridDataFactory, notificationFactory, lookupFactory) {
                $scope.animation = Animations.opacity;
                $("body").css("fontSize", @StatistiqueController.getPolice());
                //$scope.$scope = $scope;
                $scope.table = "Tarifs";
                $scope.lookupFactory = lookupFactory;
                $scope.searchBy = 'Designation';
                var saved = false;
                $scope.bon = 'Tarif';
                //$scope.pay = new Object({ Id: breeze.core.getUuid() })
                $scope.pay2 = new Object({ Id: breeze.core.getUuid() })
                $scope.showPay = false;
                $scope.filterOptions = {
                    filterText: "",
                    filterVisible: null,
                    useExternalFilter: true,
                };

                //$scope.pagingOptions = {
                //    pageSizes: [5, 10, 30],
                //    pageSize: 5,
                //    totalServerItems: 0,
                //    currentPage: 1
                //};
                $scope.deleteMode = false;
                $scope.focusFirstCell = function () {
                    // $scope.gridApi.selection.toggleRowSelection($scope.gridOptions.data[0]);
                }
                ////console.log("ok")

                $scope.onDblClickRow = function (rowItem) {

                    //console.log("dbClick")
                };
                $scope.gridOptions = {
                    showColumnFooter: true,
                    enableRowSelection: true,
                    enableRowHeaderSelection: false,
                    showGridFooter: true,
                    enableFiltering: false,
                    //paginationPageSizes: [5, 10, 30],
                    //paginationPageSize: 5,
                    enableVerticalScrollbar: uiGridConstants.scrollbars.WHEN_NEEDED,
                    enableColumnResizing: true,
                    rowHeight: 40,
                    //enableCellEditOnFocus : true,
                    /*export*/


                };
                Date.prototype.toDateInputValue = (function () {
                    var local = new Date(this);
                    local.setMinutes(this.getMinutes() - this.getTimezoneOffset());
                    return local.toJSON().slice(0, 10);
                });
                $('#datePicker').val(new Date().toDateInputValue());

                $scope.gridOptions.multiSelect = false;
                //$scope.gridOptions.modifierKeysToMultiSelect = false;
                $scope.gridOptions.noUnselect = true;
                var CellTemplateDelete = '<a style="margin-left:15px !important;" title="{{row.entity.Article.PA+10}}"  ng-click="grid.appScope.delete($event, row.entity)" class="btn-floating btnGrid waves-effect btn-flat waves-effect waves-light waves-light cyan"><i class="mdi-action-delete""></i></a>';



                $scope.item = new Object({ Id: breeze.core.getUuid(), TarifItems: [] });
                $scope.item.Date = new Date();

                $scope.gridOptions.columnDefs = [
                { enableCellEdit: false, visible: true, enableHiding: true, width: "80", allowCellFocus: false, headerCellTemplate: '<button class="btn cyan btn-xs btn-block" ng-click="" ><span class="icon-refresh"></span></button>', name: ' ', cellTemplate: CellTemplateDelete, sortable: false },
                { name: 'Article.Ref', visible: true, enableHiding: true, displayName: 'Ref', width: "140", enableCellEdit: false },
                { name: 'Article.Designation', displayName: 'Désignation', width: "*", enableCellEdit: false },
                { name: 'Pu', displayName: 'P.U', width: "120", type: "number", enableCellEditOnFocus: false, cellFilter: 'currency:dh' },

                ];


                
                $scope.gridOptions.data = [];
                //angular.forEach($scope.gridOptions.data.TarifItems, function (row) {
                //    row.getTOTAL = function () {
                //        return this.Ref;
                //    }
                //});
              
                $scope.gridOptions.onRegisterApi = function (gridApi) {
                    $scope.gridApi = gridApi;
                    gridApi.edit.on.afterCellEdit($scope, function (rowEntity, colDef, newValue, oldValue) {
                        if (rowEntity.Pu <= rowEntity.Article.PA) {
                            notificationFactory.warning("le prix de vente doit être supérieur que le prix d'achat ", "Attention");
                            //rowEntity.Pu = "";

                        }

                       
                        //rowEntity.TotalHT = rowEntity.Pu * rowEntity.Qte;
                        //if (isNaN(rowEntity.TotalHT))
                        //    rowEntity.TotalHT = "";
                        if($scope.search)
                        {
                            setTimeout(function(){
                                $("#rechercher2").focus();
                            },100);
                        }else
                        {
                            setTimeout(function(){
                                $("#rechercher").focus();
                            },100);
                        }


                        $scope.$apply();

                    });

                    gridApi.grid.registerRowBuilder(function (row, gridOptions) {
                        row.isNew = true;
                    });
                    gridApi.cellNav.on.navigate($scope, function (newRowCol, oldRowCol) {
                        $scope.gridApi.selection.selectRow(newRowCol.row.entity);
                    });

                    gridApi.selection.on.rowSelectionChanged($scope, function (row) {
                        $scope.setItem(row.entity);
                        ////console.log($scope.item);
                    });
                }
                $scope.selectRow = function () {
                    return $scope.gridApi.selection.getSelectedRows();
                };

                $scope.toggleFiltering = function () {
                    $scope.gridOptions.enableFiltering = !$scope.gridOptions.enableFiltering;
                    $scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);
                    //$scope.gridApi.core.notifyDataChange($scope.gridApi.grid, uiGridConstants.dataChange.ALL);
                };

           

                //$scope.chequeEffet = function () {
                //    var ok = false;
                //    if ($scope.pay.IdTypePaiement == '399d159e-9ce0-4fcc-957a-08a65bbeecb3' || $scope.pay.IdTypePaiement == '399d159e-9ce0-4fcc-957a-08a65bbeecb4') {
                //        ok = true;
                //    }

                //    return ok;
                //}

                $scope.save = function () {




                    if ($scope.item.Date == undefined || $scope.item.Date == "") {
                        notificationFactory.warning("Saisissez une date valide S.V.P", "Attention");
                        return;
                    }
                   
                    if ($scope.item.TarifItems.length == 0) {
                        notificationFactory.warning("Remplissez les piéces de bon S.V.P", "Attention");
                        return;
                    }

                 
                    var error = false;
                    for (var i = 0; i < $scope.item.TarifItems.length ; i++) {
                        var brItem = $scope.item.TarifItems[i];
                        if (brItem.Pu == undefined ||  brItem.Pu == null || brItem.Pu == "" ) {
                            error = true;
                        }
                    }
                    if (error) {
                        notificationFactory.warning("Remplissez tous les lignes S.V.P !", "Attention");
                        return;
                    }

                   
                    if($scope.item.Ref == undefined || $scope.item.Ref == "")
                    {
                        notificationFactory.warning("Entrez un titre", "Attention");
                        return;
                    }
                   
                    for (var i = 0; i < $scope.item.TarifItems.length; i++) {
                        delete $scope.item.TarifItems[i]["Article"];
                    }
                    crudGridDataFactory($scope.table).save($scope.item, saveSucceeded, saveFailed);


                }
                Date.prototype.addHours = function (h) {
                    this.setHours(this.getHours() + h);
                    return this;
                }
                var articles = new Object({});
                beforeSave = function (item) {
                    articles = new Object({ items: item });
                }

                $scope.delete = function (e, item) {

                    $scope.gridOptions.data.splice($scope.gridOptions.data.indexOf(item), 1);


                }

                $scope.scrollTo = function( rowIndex, colIndex ) {
                    $scope.gridApi.cellNav.scrollTo( $scope.gridOptions.data[rowIndex], $scope.gridOptions.columnDefs[colIndex]);
                };

                $scope.scrollToFocus = function( rowIndex, colIndex ) {
                    $scope.gridApi.cellNav.scrollToFocus( $scope.gridOptions.data[rowIndex], $scope.gridOptions.columnDefs[colIndex]);
                };
                $scope.$watch('search', function (oldValue, newValue) {
                    if(oldValue == newValue) return;
                    if($scope.search)
                    {
                        $scope.searchBy = 'Ref';
                    }else
                    {
                        $scope.searchBy = 'Designation';

                    }

                });

                var pressed = false;
                var chars = [];
                $scope.priorityScan = '@StatistiqueController.getScannerPriority()';
                $(window).keypress(function(e) {
                    if ($scope.filterOptions.filterClient != undefined && typeof $scope.filterOptions.filterClient !== 'object')
                    {
                        //notificationFactory.warning("Article introuvable", "Attention");

                        return;
                    }
                    var s = String.fromCharCode( e.which );
                    if ( s.toUpperCase() !== s && s.toLowerCase() === s && e.shiftKey ) {
                        notificationFactory.warning("éteindre le caps lock (majuscule)", "Attention");
                        return;

                    }
                    if (e.which >= 48 && e.which <= 57) {
                        chars.push(String.fromCharCode(e.which));
                    }
                    //console.log(e.which + ":" + chars.join("|"));
                    if (pressed == false) {
                        setTimeout(function(){
                            if (chars.length >= 10) {
                                var barcode = chars.join("");
                                //console.log("Barcode Scanned: " + barcode);
                                // assign value to some input (or do whatever you want)
                                $http.get('/Statistique/getArticleByBarCode/', { params: { barCode: barcode } })
                                .success(function (data) {
                                    ////console.log(data);
                                    if(data != null && data != undefined && data != "")
                                    {
                                        if(data.BarCode.length >= 10)
                                            $scope.addBarCode(data);


                                        $("#rechercher").val("");
                                        $("#rechercher2").val("");
                                    }
                                    else
                                    {
                                        notificationFactory.warning("Article introuvable", "Attention");
                                        $("#rechercher").val("");
                                        $("#rechercher2").val("");
                                    }

                                }).error(function(data){
                                    notificationFactory.error("Erreur", "Attention");
                                });
                                //$(".barcode").val(barcode);
                            }
                            chars = [];
                            pressed = false;
                        },300);
                    }
                    pressed = true;
                });
                //$(".barcode").keypress(function(e){
                //    if ( e.which === 13 ) {
                //        //console.log("Prevent form submit.");
                //        e.preventDefault();
                //    }
                //});
                $scope.add = function(a){
                               
                                 $scope.item.TarifItems.unshift(new Object({ Id: breeze.core.getUuid(), IdTarif: $scope.item.Id, Article: a, IdArticle: a.Id, Pu: a.PVD }));
                                 setTimeout(function(){
                                     //$scope.myLogo = a.Logo;
                                     $scope.filterOptions.filterArticle = null;
                                     $("#rechercher").val("");
                                     $("#rechercher2").val("");
                                     //$scope.myLogo = a.Logo;
                                 },40);
                                 ////console.log(a.MinStock);

                }
                $scope.addBarCode = function(a){

                                 $scope.item.TarifItems.unshift(new Object({ Id: breeze.core.getUuid(), IdTarif: $scope.item.Id, Article: a, IdArticle: a.Id, Pu: a.PVD}));
                                 setTimeout(function(){
                                     //$scope.myLogo = a.Logo;
                                     $scope.filterOptions.filterArticle = null;
                                     //$scope.myLogo = a.Logo;
                                     if($scope.priorityScan == 1)
                                        $scope.scrollToFocus(0,3);
                                 },40);

                }

                $scope.$watch('filterOptions.filterArticle', function (oldValue, newValue) {
                    if(oldValue == newValue) return;
                    if ($scope.filterOptions.filterArticle != undefined && typeof $scope.filterOptions.filterArticle === 'object') {
                            var a = $scope.filterOptions.filterArticle;
                            $scope.add(a);
                           

                    }

                });
               


               
                $scope.gridOptions.data = $scope.item.TarifItems;
                /*region generique*/
                function queryFailed(error) {
                    notificationFactory.error(error.message, "Query failed");
                }

                function itemsQuerySucceeded(data) {
                    $scope.items = data.value;
                    $scope.gridOptions.data = $scope.item.items;
                    //$timeout(function () {
                    //    if ($scope.gridApi.selection.selectRow) {
                    //        $scope.gridApi.selection.selectRow($scope.gridOptions.data[0]);
                    //    }
                    //});
                    //$scope.totalServerItems = data["odata.count"];
                    //if ($scope.items.length > 0) {
                    //    if ($scope.item) {
                    //        for (i = 0; i < $scope.items.length; i++) {
                    //            if ($scope.items[i].Id == $scope.item.Id)
                    //                $scope.dataGrid.selectedItem = $scope.items[i];
                    //        }
                    //    }
                    //    if ($scope.dataGrid.selectedItem == null) {
                    //        $scope.dataGrid.selectedItem = $scope.items[0];
                    //    }

                    //    $scope.setItem($scope.dataGrid.selectedItem);
                    //}

                    //notificationFactory.success("Fetched " + data.value.length + " " + $scope.table);
                }

                $scope.setItem = function (item) {
                    $scope.myItem = item;

                }

                function queryFailed(error) {
                    notificationFactory.error(error.message, "Query failed");
                }
                $scope.clear = function () {
                    $scope.gridOptions.data = [];

                    $scope.item = new Object({ Id: breeze.core.getUuid(), TarifItems: [] });
                    $scope.gridOptions.data = $scope.item.TarifItems;
                    $scope.item.Date = new Date();
                }

                saveSucceeded = function (saveResult) {
                    //$scope.item.TarifItems.length = 0;
                    //$scope.item = {};

                    //$scope.item.TarifItems = articles.items;
                    //$scope.gridOptions.data = articles.items;

                    notificationFactory.success();
                    //$scope.getPagedDataAsync();
                    //saved = true;

                    @*if ($scope.filterOptions.filterClient.Name == 'Autre client') {

                        myWindow = window.open("@Url.Action("PopUpPrintTarif", "Administration")", "BL");
                        myWindow.myBon = $scope.item;
                        myWindow.myBon.Client = $scope.filterOptions.filterClient;
                        $scope.clear();
                        return;

                    }*@

                

                    myWindow = window.open("@Url.Action("PopUpPrintTarif", "Administration")", "");
                    myWindow.myBon = $scope.item;
                    $scope.clear();


                }
                $scope.clear = function () {
                    $scope.gridOptions.data = [];

                    $scope.item = new Object({ Id: breeze.core.getUuid(), TarifItems: [] });
                    $scope.gridOptions.data = $scope.item.TarifItems;
                    $scope.item.Date = new Date();
                }

                //savePaySucceeded = function (saveResult) {
                //    notificationFactory.success();
                //    $scope.pay = new Object({ Id: breeze.core.getUuid() })


                //}

            
                saveFailed = function (error) {
                    var reason = error.statusText;
                    var detail = error.data["odata.error"];
                    if (detail) {
                        reason += detail.innererror.message;
                    }
                    //if (error.config["method"] == "POST")
                    //    $scope.item.Id = null; //on affecte null pour permetre d'ajouter a nouveau le meme item

                    notificationFactory.error(
                       "Impossible d'enregistrer les modifications. " + reason +
                   " Il faut actualiser la page !.");
                    /*
                    var entityErrors = error.entityErrors;

                    if (entityErrors && entityErrors.length) {
                        handleSaveValidationError(entityErrors);
                        return;
                    }
                    if (detail && detail.ExceptionType &&
                        detail.ExceptionType.indexOf('OptimisticConcurrencyException') !== -1) {
                        // Concurrency error
                        reason =
                            "Another user, perhaps the server, may have deleted one or all of the same entities.";
                    }
                    */

                };
                //$scope.gridOptions.data = $scope.table;
            }]);
            angular.bootstrap(document, ['AdminModule']);

        });
    </script>
}

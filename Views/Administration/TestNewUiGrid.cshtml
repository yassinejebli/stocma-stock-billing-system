@{
    ViewBag.Title = "Gestion des Bons de livraison";
}


<div class="card-panel">
    <div class="row">




        <div ui-grid-pagination ui-grid-selection ui-grid-auto-resize ui-grid-move-columns ui-grid="gridOptions" ui-grid-resize-columns ui-grid-edit ui-grid-cellnav class="grid"></div>

        <center>{{ gridApi.pagination.getPage() }} / {{ gridApi.pagination.getTotalPages() }}</center>
        <center>



            <a style="text-decoration:none !important" class="btn-floating waves-effect waves-light btn-large cyan" ng-click="gridApi.pagination.seek(1)">
                <<
            </a>

            <a style="text-decoration:none !important" class="btn-floating waves-effect waves-light btn-large cyan" ng-click="gridApi.pagination.previousPage()">
                <
            </a>
            <a style="text-decoration:none !important" class="btn-floating waves-effect waves-light btn-large cyan" ng-click="gridApi.pagination.nextPage()">
                >
            </a>

            <a style="text-decoration:none !important" class="btn-floating waves-effect waves-light btn-large cyan" ng-click="gridApi.pagination.seek(gridApi.pagination.getTotalPages())">
                >>
            </a>

        </center>
    </div>
</div>



@section Scripts
{

    <script>

        $(document).ready(function () {


            app.controller("AdminCtrl", ['$scope', '$element', 'Animations', 'uiGridConstants', '$timeout', '$interval', '$attrs', 'crudGridDataFactoryPage', 'notificationFactory', 'lookupFactory', function ($scope, $element, Animations, uiGridConstants, $timeout, $interval, $attrs, crudGridDataFactoryPage, notificationFactory, lookupFactory) {
                $scope.showAdd = true;
                $("body").css("fontSize", @StatistiqueController.getPolice());
                $("body").css("fontSize", @StatistiqueController.getPolice());
                $scope.state = { sortField: 'Date', sortDirection: uiGridConstants.DESC };
                $scope.paginationOptions = {
                    pageNumber: 1,
                    pageSize: 10,
                    sort: null,
                    totalServerItems: 0,
                };
                //$scope.$scope = $scope;
                $scope.table = "BonLivraisons";
                $scope.lookupFactory = lookupFactory;
                //$scope.bon = 'BonLivraisonList';
               
                //$scope.pagingOptions = {
                //    pageSizes: [5, 10, 30],
                //    pageSize: 5,
                //    totalServerItems: 0,
                //    currentPage: 1
                //};
               
                $scope.filterOptions = {
                    filterText : '',
                    filterNumBon: '',
                    filterClient: ''
                }

                $scope.deleteMode = false;
                $scope.focusFirstCell = function () {
                    //$scope.gridApi.selection.toggleRowSelection($scope.gridOptions.data[0]);
                }
                //console.log("ok")

                $scope.onDblClickRow = function (rowItem) {

                    console.log("dbClick")
                };
               
                $scope.gridOptions = {paginationPageSize: $scope.paginationOptions.pageSize,
                    useExternalFiltering: true,
                    useExternalPagination: true,
                    showColumnFooter: true,
                    enableRowSelection: true,
                    enableRowHeaderSelection: false,
                    showGridFooter: false,
                    enableFiltering: true,
                    enablePaginationControls: false,
                    paginationPageSize: $scope.paginationOptions.pageSize,
                    enableVerticalScrollbar: uiGridConstants.scrollbars.WHEN_NEEDED,
                    enableColumnResizing: true,
                    rowHeight: 40,
                    //enableCellEditOnFocus : true,
                    /*export*/
                    //enableGridMenu: true,

                };

                Date.prototype.addHours = function (h) {
                    if (this.getHours() == 00)
                        return this;
                    else {
                        this.setHours(this.getHours() + h);
                        return this;
                    }

                }
                $scope.gridOptions.multiSelect = false;
                $scope.gridOptions.modifierKeysToMultiSelect = false;
                $scope.gridOptions.noUnselect = true;

                $scope.items = [];
                var headerTemplateAdd = '<a style="margin-left:15px !important;" ng-click="grid.appScope.view($event, row.entity)"class="btn-floating btn-flat waves-effect waves-light red accent-2 btnGrid"><i class="mdi-action-visibility"></i></a><a style="margin-left:15px !important;" ng-click="grid.appScope.update($event, row.entity)"class="btn-floating btn-flat waves-effect waves-light red accent-2 btnGrid"><i class="mdi-content-save"></i></a>';

                var CellTemplateDelete = '<a style="margin-left:15px !important;"  ng-click="grid.appScope.delete($event, row.entity)" class="btn-floating btnGrid waves-effect btn-flat waves-effect waves-light waves-light red"><i class="mdi-action-delete""></i></a>';

                $scope.gridOptions.columnDefs = [
                               { enableCellEdit: false, width: "136", allowCellFocus: false, headerCellTemplate: '<button class="btn cyan btn-block" style="width:135px !important;" ng-click="grid.appScope.reset()"><span class="icon-refresh"></span></button>', name: ' ', cellTemplate: headerTemplateAdd, sortable: false },

                 { name: 'NumBon', visible: true, enableHiding: true, displayName: 'Numero BL', width: "200", enableCellEdit: true, enableCellEditOnFocus: false,filterHeaderTemplate: '<div class="ui-grid-filter-container" ng-repeat="colFilter in col.filters"><input type="text" class="ui-grid-filter-input ui-grid-filter-input-0 ng-touched" ng-model="grid.appScope.filterOptions.filterNumBon"/></div>',  },
                 { name: 'Client.Name', displayName: 'Client', width: "*",filterHeaderTemplate: '<div class="ui-grid-filter-container" ng-repeat="colFilter in col.filters"><input type="text" class="ui-grid-filter-input ui-grid-filter-input-0 ng-touched" ng-model="grid.appScope.filterOptions.filterClient"/></div>', enableCellEdit: false,filterHeaderTemplate: '<div class="ui-grid-filter-container" ng-repeat="colFilter in col.filters"><input type="text" class="ui-grid-filter-input ui-grid-filter-input-0 ng-touched" ng-model="grid.appScope.filterOptions.filterClient"/></div>', },
                 { name: 'Date', displayName: 'Date', width: "*",filterHeaderTemplate: '<div class="ui-grid-filter-container" ng-repeat="colFilter in col.filters"><input type="text" class="ui-grid-filter-input ui-grid-filter-input-0 ng-touched" ng-model="grid.appScope.filterOptions.filterClient"/></div>', type: "date", enableCellEditOnFocus: false, cellFilter: 'date:\'dd/MM/yyyy\'', filterCellFiltered: true,filterHeaderTemplate: '<div class="ui-grid-filter-container" ng-repeat="colFilter in col.filters"><input type="date" class="ui-grid-filter-input ui-grid-filter-input-0 ng-touched" ng-model="grid.appScope.filterOptions.filterDate"/></div>',  },
                 //{ name: 'TotalHT', displayName: 'TOTAL', width: "92", enableCellEdit: false, aggregationType: uiGridConstants.aggregationTypes.sum, width: '14%',  cellFilter: 'currency:dh' },

                { enableCellEdit: false, width: "76", name: '\'', allowCellFocus: false, headerCellTemplate: '<button class="btn cyan btn-xs btn-block" ng-click="grid.appScope.toggleFiltering()"><span class="icon-filter"></span></button>', cellTemplate: CellTemplateDelete, sortable: false },

                ];
             
                $scope.getPagedDataAsync = function () {
                    crudGridDataFactoryPage($scope.table,$scope.paginationOptions.pageSize, $scope.paginationOptions.pageNumber, $scope.filterOptions.filterText,$scope.state.sortField, $scope.state.sortDirection, 'BonLivraisonItems,Client').query(itemsQuerySucceeded, queryFailed);
                };
                function convertDate(today) {
                    var dd = today.getDate();
                    var mm = today.getMonth() + 1; //January is 0!

                    var yyyy = today.getFullYear();
                    if (dd < 10) {
                        dd = '0' + dd
                    }
                    if (mm < 10) {
                        mm = '0' + mm
                    }
                    var today = yyyy + '/' + mm + '/' + dd;
                    return today;
                }


                function queryFailed(error) {
                    notificationFactory.error(error.message, "Query failed");
                }


                $scope.gridOptions.onRegisterApi = function (gridApi) {
                    $scope.gridApi = gridApi;
                    gridApi.pagination.on.paginationChanged($scope, function (newPage, pageSize) {
                        $scope.paginationOptions.pageNumber = newPage;
                        $scope.paginationOptions.pageSize = pageSize;
                        $timeout(function () {
                            $scope.getPagedDataAsync();
                        }, 500);
                    });
                    $scope.gridApi.core.on.sortChanged($scope, function(grid, sortColumns) {
                        if (sortColumns.length == 0) {
                            $scope.paginationOptions.sort = null;
                        } else {
                            $scope.state.sortField = sortColumns[0].field;
                            $scope.state.sortDirection = sortColumns[0].sort.direction;
                        }
                        $scope.getPagedDataAsync();
                    });


                    //$scope.gridApi.core.on.filterChanged( $scope, function() {
                    //    var grid = this.grid;
                    //    $scope.filterOptions.filterText = grid.columns[1].filters[0].term;
                       
                    //});


                    gridApi.grid.registerRowBuilder(function (row, gridOptions) {
                        row.isNew = true;
                    });
                    gridApi.cellNav.on.navigate($scope, function (newRowCol, oldRowCol) {
                        $scope.gridApi.selection.selectRow(newRowCol.row.entity);
                    });
                }


                $scope.selectRow = function () {
                    return $scope.gridApi.selection.getSelectedRows();
                };
                $scope.$watch('filterOptions', function (oldValue,newValue) {
                    if(oldValue == newValue) return;
                    var oldfilter = $scope.filterOptions.filterText;
                    $scope.filterOptions.filterText = '';
                    if ($scope.filterOptions.filterNumBon != '' && $scope.filterOptions.filterNumBon != undefined) {
                        $scope.filterOptions.filterText += ($scope.filterOptions.filterText == '' ? '' : ' and ') + 'indexof(NumBon,\'' + $scope.filterOptions.filterNumBon + '\') gt -1';
                    }
                    if ($scope.filterOptions.filterClient != '' && $scope.filterOptions.filterClient != undefined) {
                        $scope.filterOptions.filterText += ($scope.filterOptions.filterText == '' ? '' : ' and ') + 'indexof(Client/Name,\'' + $scope.filterOptions.filterClient + '\') gt -1';
                    }
                    if ($scope.filterOptions.filterDate != '' && $scope.filterOptions.filterDate != undefined) {
                        $scope.filterOptions.filterText += ($scope.filterOptions.filterText == '' ? '' : ' and ') + 'year(Date) eq ' + $scope.filterOptions.filterDate.getFullYear() + ' and month(Date) eq ' + ($scope.filterOptions.filterDate.getMonth() +1) + ' and day(Date) eq ' + $scope.filterOptions.filterDate.getDate();
                    }

                    if (oldfilter != $scope.filterOptions.filterText)
                        $scope.getPagedDataAsync();
                    //console.log('filterOptions ', $scope.filterOptions);
                }, true);




                $scope.getPagedDataAsync();

                $scope.toggleFiltering = function () {
                    $scope.gridOptions.enableFiltering = !$scope.gridOptions.enableFiltering;
                    $scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);
                    //$scope.gridApi.core.notifyDataChange($scope.gridApi.grid, uiGridConstants.dataChange.ALL);

                };

                $scope.reset = function () {
                    //$scope.getPagedDataAsync();

                }

                $scope.update = function (e, item) {
                    //console.log(item)

                    //if (item.Qte == undefined || item.Pu == undefined || item.TotalHT == undefined || item.Qte == null || item.Pu == null || item.TotalHT == null || item.Qte == "" || item.Pu == "" || item.TotalHT == "") {
                    //    notificationFactory.warning("Remplissez tous les informations S.V.P !", "Attention");
                    //    return;
                    //}


                    if (item.Id != null) {
                        delete item['Client'];
                        delete item['BonLivraisonItems'];

                        item.Date = new Date(new Date(item.Date).valueOf() - new Date(item.Date).getTimezoneOffset() * 60000);

                        crudGridDataFactoryPage($scope.table).update({ key: 'guid\'' + item.Id + '\'' }, item, saveSucceeded, saveFailed);
                    }
                }
                $scope.view = function (e, item) {

                    myWindow = window.open("@Url.Action("PopUpPrintBonLivraison", "Administration")", "");
                    myWindow.myBon = item;
                    myWindow.myBon.Client = item.Client;

                }

                $scope.delete = function (e, item) {
                    //console.log(item)
                    if (confirm("Voulez-vous supprimer cet enregistrement ?")) {

                        if (item.Id != null) {
                            $scope.deleteMode = true;
                            crudGridDataFactoryPage($scope.table).remove({ key: 'guid\'' + item.Id + '\'' }, item, saveSucceeded, saveFailed);
                            $scope.gridOptions.data.splice($scope.gridOptions.data.indexOf(item), 1);

                        } else {
                            $scope.gridOptions.data.splice($scope.gridOptions.data.indexOf(item), 1);

                        }
                    }

                }

                /*region generique*/
                function queryFailed(error) {
                    notificationFactory.error(error.message, "Query failed");
                }

                function itemsQuerySucceeded(data) {
                    $scope.items = data.value;
                    $scope.gridOptions.data = $scope.items;
                    $scope.gridOptions.totalItems = data["odata.count"];
                    //if ($scope.items.length > 0) {
                    //    if ($scope.item) {
                    //        for (i = 0; i < $scope.items.length; i++) {
                    //            if ($scope.items[i].Id == $scope.item.Id)
                    //                $scope.dataGrid.selectedItem = $scope.items[i];
                    //        }
                    //    }
                    //    if ($scope.dataGrid.selectedItem == null) {
                    //        $scope.dataGrid.selectedItem = $scope.items[0];
                    //    }

                    //    $scope.setItem($scope.dataGrid.selectedItem);
                    //}

                    //notificationFactory.success("Fetched " + data.value.length + " " + $scope.table);

                }

                function queryFailed(error) {
                    notificationFactory.error(error.message, "Query failed");
                }

                saveSucceeded = function (saveResult) {

                    notificationFactory.success();
                    $scope.getPagedDataAsync();

                }

                saveFailed = function (error) {
                    var reason = error.statusText;
                    var detail = error.data["odata.error"];
                    if (detail) {
                        reason += detail.innererror.message;
                    }
                    if (error.config["method"] == "POST")
                        $scope.item.Id = null; //on affecte null pour permetre d'ajouter a nouveau le meme item

                    notificationFactory.error(
                       "Impossible d'enregistrer les modifications. " + reason +
                   " Il faut actualiser la page.");
                    $scope.getPagedDataAsync();
                    /*
                    var entityErrors = error.entityErrors;

                    if (entityErrors && entityErrors.length) {
                        handleSaveValidationError(entityErrors);
                        return;
                    }
                    if (detail && detail.ExceptionType &&
                        detail.ExceptionType.indexOf('OptimisticConcurrencyException') !== -1) {
                        // Concurrency error
                        reason =
                            "Another user, perhaps the server, may have deleted one or all of the same entities.";
                    }
                    */

                };
                //$scope.gridOptions.data = $scope.table;
            }]);
            angular.bootstrap(document, ['AdminModule']);

        });
    </script>
}

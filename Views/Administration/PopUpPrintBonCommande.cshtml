@{
    ViewBag.Title = "Gestion des Bons de commande";
    //Layout = "~/Views/Shared/_LayoutPopUPArticle.cshtml";
}


<div class="card-panel">
    <div class="row">

        <div class="row">
            <div style="margin-left:20px !important;" class="pull-left">
                <div class="form-group">
                    <input autocomplete="off" readonly placeholder="Filter par un Fournisseur" id="disabled" type="text" class="validate "
                           ng-model="filterOptions.filterFournisseur" typeahead-wait-ms=" 100"
                           typeahead="v as v.Name for v  in lookupFactory.get('Fournisseurs', 'Name', $viewValue)">
                </div>
            </div>
            <!--  (table, field, text, expand, vide, limit, wheres) -->
            <input type="date" readonly id="datePicker" placeholder="Choisissez une date" ng-model="filterOptions.filterDate" style="width:130px !important;margin-right:15px !important;" class="pull-right">
            <div class="col-lg-4 col-lg-offset-3" style="width:320px !important;">
                <div class="form-group-inline">


                    <div class="input-field col s12">
                        <input utocomplete="off" ng-model="filterOptions.filterBonCommande" placeholder="choisissez un Bon commande"
                               typeahead="v as v.NumBon for v  in lookupFactory.getExpand('BonCommandes', 'NumBon', $viewValue,'Fournisseur,BonCommandeItems',null,'oui',null)"
                               typeahead-wait-ms=" 100" id="name2" type="text">
                        <label for="first_name" class="active">BC N° </label>
                    </div>
                </div>
            </div>
        </div>
        <div class="row" style="margin-left:10px;">

            <div class="switch">
                Format du commande :
                <label>
                    Petit
                    <input type="checkbox" ng-model="grandFormat">
                    <span class="lever"></span> Grand
                </label>
            </div>
            </div>

            @if (StatistiqueController.getCompanyName() == "SUIV" || StatistiqueController.getCompanyName() == "SBCIT")
            {
                <div class="row" style="margin-left:10px;">
                    <div class="switch">
                        Cachet :
                        <label>
                            Non
                            <input type="checkbox" ng-model="cachet">
                            <span class="lever"></span> Oui
                        </label>
                    </div>
                </div>
                <div class="row" style="margin-left:10px;">

                    <div class="switch">
                        Chiffré :
                        <label>
                            Non
                            <input type="checkbox" ng-model="chiffre">
                            <span class="lever"></span> Oui
                        </label>
                    </div>
                </div>
                    }

                    <div ui-grid-selection ui-grid-exporter ui-grid-auto-resize ui-grid-move-columns ui-grid="gridOptions" ui-grid-resize-columns ui-grid-edit ui-grid-cellnav class="grid"></div>


                    <div style="bottom: 45px; left: 24px;position:fixed" ng-show="check()">
                        <a class="btn-floating btn-large orange" ng-click="SupprimerBon()">
                            <i class="large mdi-action-delete"></i>
                        </a>
                    </div>

                </div>
</div>

<div style="bottom: 45px; left: 90px;position:fixed" ng-show="check()">
    <a class="btn-floating btn-large green" ng-click="print()">
        <i class="large mdi-action-print"></i>
    </a>
</div>
@if (StatistiqueController.getCompanyName() == "SUIV" || StatistiqueController.getCompanyName() == "SBCIT" || StatistiqueController.getCompanyName() == "AQK")
{
    <div style="bottom: 23px; right: 95px;position:fixed" ng-show="check() && envoye">
        <a class="btn-floating btn-large pink" ng-click="email()">
            <i class="large mdi-communication-email"></i>
        </a>
    </div>
}
@section Scripts
{

    <script>

        $(document).ready(function () {


            app.controller("AdminCtrl", ['$scope','$http', '$element', 'Animations', 'uiGridConstants', '$timeout', '$interval', '$attrs', 'crudGridDataFactory', 'notificationFactory', 'lookupFactory', function ($scope,$http, $element, Animations, uiGridConstants, $timeout, $interval, $attrs, crudGridDataFactory, notificationFactory, lookupFactory) {
                $scope.client = '@StatistiqueController.getCompanyName().ToUpper()';
                $scope.showAdd = true;
                $scope.envoye = true;
                $scope.chiffre= false;
                $scope.grandFormat = true;
                $("body").css("fontSize", @StatistiqueController.getPolice());
                $("body").css("fontSize", @StatistiqueController.getPolice());
                //$scope.$scope = $scope;
                $scope.cachet= false;
                $scope.table = "BonCommandeItems";
                $scope.lookupFactory = lookupFactory;
                $scope.bon = 'BonCommandeList';
                $scope.filterOptions = {
                    filterText: "",
                    filterVisible: null,
                    useExternalFilter: true
                };
                //$scope.pagingOptions = {
                //    pageSizes: [5, 10, 30],
                //    pageSize: 5,
                //    totalServerItems: 0,
                //    currentPage: 1
                //};
                $scope.deleteMode = false;
                $scope.focusFirstCell = function () {
                    //$scope.gridApi.selection.toggleRowSelection($scope.gridOptions.data[0]);
                }
                //console.log("ok")

                $scope.onDblClickRow = function (rowItem) {

                    console.log("dbClick")
                };

                $scope.email = function(){
                

                    if ($scope.filterOptions.filterBonCommande != undefined && typeof $scope.filterOptions.filterBonCommande === 'object')
                    {
                        if($scope.filterOptions.filterBonCommande.Fournisseur.Email != undefined && $scope.filterOptions.filterBonCommande.Fournisseur.Email != null && $scope.filterOptions.filterBonCommande.Fournisseur.Email != ""){
                            $scope.envoye = false;
                            $http({ url: "/Administration/EmailBonCommande?IdBonCommande="+$scope.filterOptions.filterBonCommande.Id+"&Cachet="+$scope.cachet, method: 'GET' })
                     .success(function (data) {
                         if(data.envoye == 1){
                             notificationFactory.info("Le mail est bien envoyé à :<br/> <b>"+$scope.filterOptions.filterBonCommande.Fournisseur.Name+"</b>", "Succés");
                             $scope.envoye = true;
                         }else{
                             notificationFactory.warning("Il y'a un erreur lors de l'envoi de mail", "Attention");
                             $scope.envoye = true;
                         }

                     });
                        }
                        else
                            notificationFactory.warning("Vous devez attribuer un email pour le fournisseur : "+$scope.filterOptions.filterBonCommande.Fournisseur.Name, "Attention");

                    }

                }

                $scope.gridOptions = {
                    showColumnFooter: true,
                    enableRowSelection: true,
                    enableRowHeaderSelection: false,
                    showGridFooter: true,
                    enableFiltering: false,
                    //paginationPageSizes: [5, 10, 30],
                    //paginationPageSize: 5,
                    enableVerticalScrollbar: uiGridConstants.scrollbars.WHEN_NEEDED,
                    enableColumnResizing: true,
                    rowHeight: 40,
                    //enableCellEditOnFocus : true,
                    /*export*/
                    //enableGridMenu: true,
                    /*export*/
                    //enableGridMenu: true,
                    exporterPdfDefaultStyle: { fontSize: 14 },
                    exporterPdfTableStyle: { margin: [-18, 40, 3, 5] },
                    exporterPdfTableHeaderStyle: { fontSize: 14, bold: true, italics: true, color: 'black', },
                    exporterPdfFooter: function (currentPage, pageCount) {

                        return { text: currentPage.toString() + ' / ' + pageCount.toString(), style: 'footerStyle' };
                    },
                    exporterPdfCustomFormatter: function (docDefinition) {
                        docDefinition.pageMargins = [40, 210, 50, 130];
                        docDefinition.styles.headerStyle = { fontSize: 13, bold: true };
                        docDefinition.styles.footerStyle = { fontSize: 10, bold: true, marginLeft: 557, marginTop: 50 };
                        //docDefinition.content = [{ text: "BL N° : 132/2015", marginLeft: 125, fontSize: 12 }].concat(docDefinition.content);//convertDate(new Date($scope.filterOptions.filterBonCommande.Date))
                        //docDefinition.content = [{decoration: 'underline', text: "Fournisseur : " + $scope.filterOptions.filterBonCommande.Fournisseur.Name.toUpperCase(), marginLeft: 180, fontSize: 17, marginTop: 30, bold: true }].concat(docDefinition.content);
                        //docDefinition.content = [{ columns: [{ text: "BonCommande N° :  " + $scope.filterOptions.filterBonCommande.NumBon, fontSize: 13, marginTop: 7,marginLeft:-15, bold: true, decoration: 'underline' }, { text: convertDate(new Date($scope.filterOptions.filterBonCommande.Date)), alignment: 'right', marginTop: 7, decoration: 'underline' }] }].concat(docDefinition.content);

                        //docDefinition.content = [{ image: encodedBase, width: 593, height: 170, marginLeft: -60,marginTop:-25 }].concat(docDefinition.content);
                        //  docDefinition.content = docDefinition.content.concat([{ text: "", marginTop: 100 }]);


                        docDefinition.content[0].layout = 'lightHorizontalLines';
                        docDefinition.content = docDefinition.content.concat([{ decoration: 'underline', text: "TOTAL HT    :   " + (totals/1.2).toFixed(2) + " DH                                         ", marginLeft: 360, fontSize: 12, bold: true, marginTop: 10 }]);
                        //docDefinition.content[3].layout = 'lightHorizontalLines'
                        //{
                        //    //hLineWidth: function(i, node) {
                        //    //  return (i === 0 || i === node.table.body.length) ? 2 : 1;
                        //    //},
                        //    //vLineWidth: function(i, node) {
                        //    //  return (i === 0 || i === node.table.widths.length) ? 2 : 1;
                        //    //},
                        //    hLineColor: function (i, node) {
                        //        return'blue';
                        //    },
                        //    vLineColor: function (i, node) {
                        //        return 'blue';
                        //    },
                        //    paddingLeft: function (i, node) { return 40; },
                        //    paddingRight: function (i, node) { return 40; },
                        //    paddingTop: function (i, node) { return 20; },
                        //    paddingBottom: function (i, node) { return 20; }
                        //}
                        docDefinition.content = docDefinition.content.concat([{ decoration: 'underline', text: "TVA 20% :         "+ (totals * 0.2).toFixed(2) +" DH                                            ", marginLeft: 360, fontSize: 12, bold: true, marginTop: 0 }]);
                        docDefinition.content = docDefinition.content.concat([{ decoration: 'underline', text: "TOTAL TTC  :   " + parseFloat(totals).toFixed(2) + " DH                                       ", marginLeft: 360, fontSize: 12, bold: true, marginTop: 0 }]);
                        return docDefinition;
                    },
                    exporterPdfOrientation: 'portrait',
                    exporterPdfPageSize: 'LETTER',
                    exporterPdfMaxGridWidth: 500,
                    exporterSuppressColumns: [' ', 'Article.Ref', '\''],
                    exporterFieldCallback: function (grid, row, col, input) {
                        if (col.name == 'Qte' || col.name == 'Pu' || col.name == 'TotalHT') {
                            return input.toFixed(2);
                        } else {
                            return input.toUpperCase();
                        }
                    },

                };
                $http.get('/Statistique/getTel/')
                  .success(function (data) {
                      $scope.tel = data;

                  });
                $scope.print = function () {
                    for (var i = 0; i < $scope.items.length; i++) {
                        myItem = $scope.items[i];
                        if(myItem.Id == null)
                        {
                            notificationFactory.warning("Enregistrez tous les lignes !", "Attention");
                            return;
                        }
                    }
                    if ($scope.filterOptions.filterBonCommande != undefined && typeof $scope.filterOptions.filterBonCommande === 'object') {
                        if ($scope.grandFormat) {
                            window.location = "ExportBonCommande?IdBonCommande=" + $scope.filterOptions.filterBonCommande.Id + "&Cachet=" + $scope.cachet + "&Chiffre=" + $scope.chiffre;

                                return;
                            $scope.gridOptions.exporterPdfDefaultStyle = { fontSize: 14 };
                            $scope.gridOptions.exporterPdfTableStyle = { margin: [-18, 40, 3, 5] };
                            $scope.gridOptions.exporterPdfTableHeaderStyle = { fontSize: 14, bold: true, italics: true, color: 'black' };
                            $scope.gridOptions.exporterPdfFooter = function (currentPage, pageCount) {

                                return { text: currentPage.toString() + ' / ' + pageCount.toString(), style: 'footerStyle' };
                            },
                            $scope.gridOptions.exporterPdfCustomFormatter = function (docDefinition) {
                                docDefinition.pageMargins = [40, 210, 50, 130];

                                docDefinition.styles.headerStyle = { fontSize: 13, bold: true };
                                docDefinition.styles.footerStyle = { fontSize: 10, bold: true, marginLeft: 557, marginTop: 50 };
                                //docDefinition.content = [{ text: "BL N° : 132/2015", marginLeft: 125, fontSize: 12 }].concat(docDefinition.content);
                                docDefinition.content[0].layout = 'lightHorizontalLines';
                                docDefinition.content = docDefinition.content.concat([{ decoration: 'underline', text: "TOTAL : " + totals + " DH", marginLeft: 390, bold: true, marginTop: 50, fontSize: 12 }]);
                                if ($scope.tel != undefined && $scope.tel != "")
                                    docDefinition.content = docDefinition.content.concat([{ text: "TEL  : " + $scope.tel, marginLeft: -15, fontSize: 11, bold: true, marginTop: 10 }]);
                                return docDefinition;
                            },
                            $scope.gridOptions.exporterPdfOrientation = 'portrait';
                            $scope.gridOptions.exporterPdfPageSize = 'LETTER';
                            $scope.gridOptions.exporterPdfMaxGridWidth = 500;

                            $scope.gridOptions.exporterPdfHeader = {
                                columns: [{decoration: 'underline' , width:350, bold: true, alignment: 'left', marginLeft: 25, marginTop: 130, text: ($scope.filterOptions.filterBonCommande == undefined) ? '' : "Bon de commande   BC° : " + $scope.filterOptions.filterBonCommande.NumBon },
                                    {  alignment: 'center', marginTop: 180,marginLeft:-210, text: "FOURNISSEUR : " + $scope.filterOptions.filterBonCommande.Fournisseur.Name.toUpperCase(), decoration: 'underline'},
                                    { alignment: 'right', marginRight: 25, marginTop: 130, text: convertDate(new Date($scope.filterOptions.filterBonCommande.Date)), decoration: 'underline' }]
                            };
                        } else
                        {
                            ///////////////////////////////////////
                            $scope.gridOptions.exporterPdfDefaultStyle = { fontSize: 10 };
                            $scope.gridOptions.exporterPdfTableStyle = { margin: [-18, 25, 3, 5] };
                            $scope.gridOptions.exporterPdfTableHeaderStyle = { fontSize: 12, bold: true, italics: true, color: 'black' };
                            $scope.gridOptions.exporterPdfFooter = function (currentPage, pageCount) {

                                return { text: currentPage.toString() + ' / ' + pageCount.toString(), style: 'footerStyle' };
                            },
                            $scope.gridOptions.exporterPdfCustomFormatter = function (docDefinition) {
                                docDefinition.pageMargins = [410, 80, 0, 20];

                                docDefinition.styles.headerStyle = { fontSize: 12, bold: true, };
                                docDefinition.styles.footerStyle = { fontSize: 10, bold: true, marginLeft: 580 };
                                //docDefinition.content = [{ text: "BL N° : 132/2015", marginLeft: 125, fontSize: 12 }].concat(docDefinition.content);
                                docDefinition.content[0].layout = 'lightHorizontalLines';
                                docDefinition.content = docDefinition.content.concat([{width:500, decoration: 'underline', text: "TOTAL : " + totals + " DH", marginLeft: 270, fontSize: 10, bold: true, marginTop: 13 }]);
                                
                                if ($scope.tel != undefined && $scope.tel != "")
                                    docDefinition.content = docDefinition.content.concat([{ text: "TEL  : " + $scope.tel, marginLeft: -15, fontSize: 11, bold: true, marginTop: 10 }]);
                                return docDefinition;
                            },
                            $scope.gridOptions.exporterPdfOrientation = 'landscape';
                            $scope.gridOptions.exporterPdfPageSize = 'LETTER';
                            $scope.gridOptions.exporterPdfMaxGridWidth = 345;
                            $scope.gridOptions.exporterPdfHeader = {
                                columns: [{width:700, bold: true, fontSize: 12,  marginLeft: 390, marginTop: 15, text: ($scope.filterOptions.filterBonCommande == undefined) ? '' : "Bon de commande   BC° : " + $scope.filterOptions.filterBonCommande.NumBon },
                                    { marginLeft: -310, marginTop: 34, text: "FOURNISSEUR : " + $scope.filterOptions.filterBonCommande.Fournisseur.Name.toUpperCase(), decoration: 'underline', bold: false, fontSize: 12 },
                                    {decoration:'underline', marginLeft: -355, marginTop: 65, text: "DATE : " + convertDate(new Date($scope.filterOptions.filterBonCommande.Date)), fontSize: 11 }]
                            };


                           
                        }
                        $scope.gridApi.exporter.pdfExport('all', 'all');
                        window.close();

                    }


                }
                $scope.gridOptions.multiSelect = false;
                $scope.gridOptions.modifierKeysToMultiSelect = false;
                $scope.gridOptions.noUnselect = true;

                $scope.items = [];
                var headerTemplateAdd = '<a style="margin-left:15px !important;" title="{{row.entity.Article.PA+10}}" ng-click="grid.appScope.update($event, row.entity)"class="btn-floating btn-flat waves-effect waves-light red accent-2 btnGrid"><i class="mdi-content-save"></i></a>';

                var CellTemplateDelete = '<a style="margin-left:15px !important;" title="{{row.entity.Article.PA+10}}" ng-click="grid.appScope.delete($event, row.entity)" class="btn-floating btnGrid waves-effect btn-flat waves-effect waves-light waves-light red"><i class="mdi-action-delete""></i></a>';

                $scope.gridOptions.columnDefs = [
                               { enableCellEdit: false, width: "76", allowCellFocus: false, headerCellTemplate: '<button class="btn cyan btn-xs btn-block" ng-click="grid.appScope.addNew()"><span class="icon-plus"></span></button>', name: ' ', cellTemplate: headerTemplateAdd, sortable: false },

                 { name: 'Article.Ref', visible: true, enableHiding: true, displayName: 'Ref', width: "140", enableCellEdit: false },
                 { name: 'Article.Designation', displayName: 'Désignation', width: "*", enableCellEdit: false },
                 { name: 'Qte', displayName: 'Qte', width: "120", type: "number", enableCellEditOnFocus: false,  cellFilter: 'number: 2' },
                 { name: 'Pu', displayName: 'P.U', width: "120", type: "number", enableCellEditOnFocus: false, cellFilter: 'currency:dh' },
                 { name: 'TotalHT', displayName: 'MONTANT', width: "92", enableCellEdit: false, aggregationType: uiGridConstants.aggregationTypes.sum, width: '14%',  cellFilter: 'currency:dh' },

                { enableCellEdit: false, width: "76", name: '\'', allowCellFocus: false, headerCellTemplate: '<button class="btn cyan btn-xs btn-block" ng-click="grid.appScope.toggleFiltering()"><span class="icon-filter"></span></button>', cellTemplate: CellTemplateDelete, sortable: false },

                ];


                setTimeout(function () {
                    if (window.myBon != undefined)
                    {
                        $scope.filterOptions.filterBonCommande = window.myBon;

                    }


                }),100;
                $scope.filterOptions = {
                    filterText: '',
                    filterBonCommande: '',
                    filterFournisseur: ''
                }
                $scope.getPagedDataAsync = function () {
                    crudGridDataFactory($scope.table, $scope.filterOptions.filterText, 'BonCommande,Article').query(itemsQuerySucceeded, queryFailed);
                };
                $scope.$watch('filterOptions.filterArticle', function (oldValue, newValue) {
                    if(oldValue == newValue) return;
                    if ($scope.filterOptions.filterArticle != undefined && typeof $scope.filterOptions.filterArticle === 'object') {
                        if ($scope.filterOptions.filterFournisseur != undefined && typeof $scope.filterOptions.filterFournisseur === 'object') {
                            var a = $scope.filterOptions.filterArticle;
                           
                            $scope.items.unshift(new Object({ IdBonCommande: $scope.filterOptions.filterBonCommande.Id, Article: a, IdArticle: a.Id, Pu: a.PA }));
                            setTimeout(function(){
                                //$scope.myLogo = a.Logo;
                                $scope.filterOptions.filterArticle = null;
                                //$scope.myLogo = a.Logo;
                                $scope.scrollToFocus(0,3);

                            },100);


                        }else
                        {

                            notificationFactory.warning("Choisissez un Fournisseur ! ", "Attention");
                        }
                    }

                });
                $scope.scrollToFocus = function( rowIndex, colIndex ) {
                    $scope.gridApi.cellNav.scrollToFocus( $scope.gridOptions.data[rowIndex], $scope.gridOptions.columnDefs[colIndex]);
                };
                //$scope.getPagedDataAsync();
                function convertDate(today) {
                    var dd = today.getDate();
                    var mm = today.getMonth() + 1; //January is 0!

                    var yyyy = today.getFullYear();
                    if (dd < 10) {
                        dd = '0' + dd
                    }
                    if (mm < 10) {
                        mm = '0' + mm
                    }
                    var today = dd + '/' + mm + '/' + yyyy;
                    return today;
                }
                var totals = 0;
                $scope.$watch('filterOptions', function (oldValue, newValue) {
                    var oldfilter = $scope.filterOptions.filterText;
                    $scope.filterOptions.filterText = '';


                    if ($scope.filterOptions.filterBonCommande != undefined && typeof $scope.filterOptions.filterBonCommande === 'object') {
                        if ($scope.filterOptions.filterBonCommande['NumBon'] != '' && $scope.filterOptions.filterBonCommande['NumBon'] != undefined) {
                            $scope.filterOptions.filterText += ($scope.filterOptions.filterText == '' ? '' : ' and ') + 'BonCommande/Id eq guid\'' + $scope.filterOptions.filterBonCommande.Id + '\'';
                            $scope.filterOptions.filterFournisseur = $scope.filterOptions.filterBonCommande.Fournisseur;
                            $scope.filterOptions.filterDate = new Date($scope.filterOptions.filterBonCommande.Date);
                            $scope.gridOptions.exporterPdfHeader = { columns: [{ decoration: 'underline',width:220, marginTop: 130, marginLeft: 25, alignment: 'left', text: ($scope.filterOptions.filterBonCommande == undefined) ? '' : "Bon commande   N° : " + $scope.filterOptions.filterBonCommande.NumBon }, { alignment: 'center', marginTop: 170, text: "Fournisseur : " + $scope.filterOptions.filterBonCommande.Fournisseur.Name.toUpperCase(), decoration: 'underline' }, { alignment: 'right', text: convertDate(new Date($scope.filterOptions.filterBonCommande.Date)), marginTop: 130, marginRight: 25, decoration: 'underline' }] };


                        }
                    }

                    if (($scope.filterOptions.filterText == '' /*|| flagWorkUnit == false || flagExercice == false*/)) {
                        $scope.filterOptions.filterText = 'indexof(BonCommande/NumBon,\'\') gt -1';
                    }
                    if (oldfilter != $scope.filterOptions.filterText) {

                        $scope.getPagedDataAsync();

                    }
                }, true);
                $scope.check = function () {
                    var ok = false;
                    if ($scope.filterOptions.filterBonCommande != undefined && typeof $scope.filterOptions.filterBonCommande === 'object') {
                        ok = true;
                    }
                    return ok;
                }

                $scope.SupprimerBon = function () {
                    if ($scope.filterOptions.filterBonCommande != undefined && typeof $scope.filterOptions.filterBonCommande === 'object') {
                        if (confirm("Voulez-vous supprimer ce bon ?")) {
                            crudGridDataFactory('BonCommandes').remove({ key: 'guid\'' + $scope.filterOptions.filterBonCommande.Id + '\'' }, $scope.filterOptions.filterBonCommande, saveSucceeded, saveFailed);
                        }
                    }
                    else {
                        notificationFactory.warning("Choisissez un bon de commande pour le supprimer !", "Attention");
                    }

                }

                $scope.gridOptions.onRegisterApi = function (gridApi) {
                    $scope.gridApi = gridApi;
                    gridApi.edit.on.afterCellEdit($scope, function (rowEntity, colDef, newValue, oldValue) {
                        rowEntity.TotalHT = rowEntity.Pu * rowEntity.Qte;
                        if (isNaN(rowEntity.TotalHT))
                            rowEntity.TotalHT = "";
                        $scope.$apply();
                    });
                    gridApi.grid.registerRowBuilder(function (row, gridOptions) {
                        row.isNew = true;
                    });
                    gridApi.cellNav.on.navigate($scope, function (newRowCol, oldRowCol) {
                        $scope.gridApi.selection.selectRow(newRowCol.row.entity);
                    });
                }
                $scope.selectRow = function () {
                    return $scope.gridApi.selection.getSelectedRows();
                };

                $scope.toggleFiltering = function () {
$scope.gridOptions.enableFiltering = !$scope.gridOptions.enableFiltering;
                    $scope.gridApi.core.notifyDataChange(uiGridConstants.dataChange.COLUMN);
                    //$scope.gridApi.core.notifyDataChange($scope.gridApi.grid, uiGridConstants.dataChange.ALL);

                };

                $scope.addNew = function () {
                    $scope.addMode = true;
                    //$scope.item = new Object();
                    //$scope.items.unshift($scope.item);
                    //$scope.focusFirstCell();
                    if ($scope.filterOptions.filterBonCommande != undefined && typeof $scope.filterOptions.filterBonCommande === 'object') {

                        window.open("@Url.Action("PopUpArticle", "Administration")", "MesProduits", "width=950, height=650,top=0, left=0");

                    } else {
                        notificationFactory.warning("Choisissez un bon de commande", "Attention");

                    }

                }

                $scope.update = function (e, item) {
                    //console.log(item)

                    if (item.Qte == undefined || item.Pu == undefined || item.TotalHT == undefined || item.Qte == null || item.Pu == null || item.TotalHT == null || item.Qte == "" || item.Pu == "" || item.TotalHT == "") {
                        notificationFactory.warning("Remplissez tous les informations S.V.P !", "Attention");
                        return;
                    }
                    item.TotalHT = item.Qte * item.Pu;

                    if (item.Id == null) {
                        item.Id = breeze.core.getUuid();

                        delete item["Article"]
                        delete item["BonCommande"]
                        crudGridDataFactory($scope.table).save(item, saveSucceeded, saveFailed);

                    }
                    else {

                        delete item["Article"]
                        delete item["BonCommande"]
                        crudGridDataFactory($scope.table).update({ key: 'guid\'' + item.Id + '\'' }, item, saveSucceeded, saveFailed);
                    }
                }


                $scope.delete = function (e, item) {
                    //console.log(item)
                    if (confirm("Voulez-vous supprimer cet enregistrement ?")) {

                        if (item.Id != null) {
                            $scope.deleteMode = true;
                            crudGridDataFactory($scope.table).remove({ key: 'guid\'' + item.Id + '\'' }, item, saveSucceeded, saveFailed);
                            $scope.gridOptions.data.splice($scope.gridOptions.data.indexOf(item), 1);

                        } else {
                            $scope.gridOptions.data.splice($scope.gridOptions.data.indexOf(item), 1);

                        }
                    }

                }

                /*region generique*/
                function queryFailed(error) {
                    notificationFactory.error(error.message, "Query failed");
                }

                function itemsQuerySucceeded(data) {
                    $scope.items = data.value;
                    $scope.gridOptions.data = $scope.items;

                    //$scope.totalServerItems = data["odata.count"];
                    //if ($scope.items.length > 0) {
                    //    if ($scope.item) {
                    //        for (i = 0; i < $scope.items.length; i++) {
                    //            if ($scope.items[i].Id == $scope.item.Id)
                    //                $scope.dataGrid.selectedItem = $scope.items[i];
                    //        }
                    //    }
                    //    if ($scope.dataGrid.selectedItem == null) {
                    //        $scope.dataGrid.selectedItem = $scope.items[0];
                    //    }

                    //    $scope.setItem($scope.dataGrid.selectedItem);
                    //}

                    //notificationFactory.success("Fetched " + data.value.length + " " + $scope.table);
                    totals = 0;
                    for (var i = 0; i < $scope.items.length; i++) {
                        var x = $scope.items[i].TotalHT;
                        totals += x;
                    }
                    totals = totals.toFixed(2);
                }

                function queryFailed(error) {
                    notificationFactory.error(error.message, "Query failed");
                }

                saveSucceeded = function (saveResult) {

                    notificationFactory.success();
                    $scope.getPagedDataAsync();
                    totals = 0;
                    for (var i = 0; i < $scope.items.length; i++) {
                        var x = $scope.items[i].TotalHT;
                        totals += x;
                    }
                    totals = totals.toFixed(2);

                }

                saveFailed = function (error) {
                    var reason = error.statusText;
                    var detail = error.data["odata.error"];
                    if (detail) {
                        reason += detail.innererror.message;
                    }
                    if (error.config["method"] == "POST")
                        $scope.item.Id = null; //on affecte null pour permetre d'ajouter a nouveau le meme item

                    notificationFactory.error(
                       "Impossible d'enregistrer les modifications. " + reason +
                   " Il faut actualiser la page.");
                    $scope.getPagedDataAsync();
                    /*
                    var entityErrors = error.entityErrors;

                    if (entityErrors && entityErrors.length) {
                        handleSaveValidationError(entityErrors);
                        return;
                    }
                    if (detail && detail.ExceptionType &&
                        detail.ExceptionType.indexOf('OptimisticConcurrencyException') !== -1) {
                        // Concurrency error
                        reason =
                            "Another user, perhaps the server, may have deleted one or all of the same entities.";
                    }
                    */

                };
                //$scope.gridOptions.data = $scope.table;
            }]);
            angular.bootstrap(document, ['AdminModule']);

        });
    </script>
}
